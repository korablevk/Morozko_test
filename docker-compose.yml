version: '3.8'

services:

  django_backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: django_backend
    command: python manage.py runserver 0.0.0.0:8080
    volumes:
      - .:/usr/src/app
    ports:
      - 8080:8080
    depends_on:
      - pgdb
      - redis
      - celery_backend

  pgdb:
    image: postgres
    env_file:
      - .env-non-dev
    container_name: pgdb
    volumes:
      - pgdbdata:/var/lib/postgresql/data/

  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    restart: unless-stopped

  images_microservice:
    build:
      context: ./images_microservice
      dockerfile: Dockerfile
    depends_on:
      - redis
      - celery_images
    env_file:
      - .env-non-dev
    command: sh -c "gunicorn main:app --workers 1 --worker-class uvicorn.workers.UvicornWorker --bind=0.0.0.0:8000"
    ports:
      - "7777:8000"
    volumes:
      - ./images_microservice/static:/images_microservice/static

  celery_images:
    build:
      context: ./images_microservice
    depends_on:
      - redis
    env_file:
      - .env-non-dev
    volumes:
      - ./images_microservice/static:/images_microservice/static
    command: sh -c "celery -A tasks.celery_app:celery_app worker --loglevel=info --pool=threads"
    restart: unless-stopped


  celery_backend:
    build:
      context: ./backend
    depends_on:
      - redis
    env_file:
      - .env-non-dev
    volumes:
      - .:/usr/src/app
    command: sh -c "celery -A settings.celery worker --loglevel=info --pool=threads"
    restart: unless-stopped


volumes:
  pgdbdata: null

